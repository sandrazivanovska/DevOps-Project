name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # CI Job - Build and Test
  ci:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm install

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm install

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
      continue-on-error: true

    - name: Run backend tests
      working-directory: ./backend
      run: npm test
      continue-on-error: true

    - name: Build frontend
      working-directory: ./frontend
      run: CI=false npm run build

  # CD Job - Build and Push Docker Images
  cd:
    needs: ci
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
        labels: |
          org.opencontainers.image.title=${{ env.IMAGE_NAME }}-backend
          org.opencontainers.image.description=Backend API for DevOps Project
          org.opencontainers.image.version=${{ github.sha }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
        labels: |
          org.opencontainers.image.title=${{ env.IMAGE_NAME }}-frontend
          org.opencontainers.image.description=Frontend for DevOps Project
          org.opencontainers.image.version=${{ github.sha }}

    - name: Build and push nginx image
      uses: docker/build-push-action@v5
      with:
        context: ./nginx
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nginx:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nginx:${{ github.sha }}
        labels: |
          org.opencontainers.image.title=${{ env.IMAGE_NAME }}-nginx
          org.opencontainers.image.description=Nginx for DevOps Project
          org.opencontainers.image.version=${{ github.sha }}

  # Optional: Deploy to Kubernetes (Bonus Points)
  deploy:
    needs: cd
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig
        # Update image tags in manifests
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest|g" k8s/deployments.yaml
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest|g" k8s/deployments.yaml
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nginx:latest|g" k8s/deployments.yaml
        
        # Apply manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmaps.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/statefulset.yaml
        kubectl apply -f k8s/deployments.yaml
        kubectl apply -f k8s/services.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl get pods -n devops-app
        kubectl get services -n devops-app
        kubectl get ingress -n devops-app