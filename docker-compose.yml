services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: devops-postgres
    environment:
      POSTGRES_DB: devops_app
      POSTGRES_USER: devops_user
      POSTGRES_PASSWORD: devops_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - devops-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: devops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - devops-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: devops-backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: devops_app
      DB_USER: devops_user
      DB_PASSWORD: devops_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    networks:
      - devops-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: devops-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - devops-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: devops-nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - devops-network

volumes:
  postgres_data:
  redis_data:

networks:
  devops-network:
    driver: bridge
