services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: devops-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: devops_user
      MONGO_INITDB_ROOT_PASSWORD: devops_password
      MONGO_INITDB_DATABASE: devops_app
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./database/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - devops-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: devops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - devops-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: devops-backend
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://devops_user:devops_password@mongodb:27017/devops_app?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    networks:
      - devops-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: devops-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - devops-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: devops-nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - devops-network

volumes:
  mongodb_data:
  redis_data:

networks:
  devops-network:
    driver: bridge
